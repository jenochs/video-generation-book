[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "videogenbook"
version = "0.1.0"
authors = [
    {name = "Jenochs", email = "joseph.enochs@gmail.com"},
]
description = "Companion package for 'Hands-On Video Generation with AI' - utilities and examples for 2025's breakthrough video AI models"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education", 
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Video",
    "Topic :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Framework :: Jupyter",
]
keywords = [
    "video-generation",
    "artificial-intelligence",
    "machine-learning", 
    "computer-vision",
    "deep-learning",
    "diffusion-models",
    "transformers",
    "jupyter",
    "education",
    "oreilly",
    "veo3",
    "kling-ai",
    "runway",
    "hunyuan",
    "opensora"
]
dependencies = [
    "torch>=2.7.1",
    "torchvision",
    "torchaudio", 
    "diffusers>=0.33.1",
    "transformers>=4.52.4",
    "accelerate",
    "safetensors",
    "opencv-python",
    "pillow>=9.0.0",
    "imageio",
    "imageio-ffmpeg",
    "numpy>=1.21.0",
    "scipy",
    "matplotlib",
    "pandas",
    "jupyter",
    "ipywidgets",
    "tqdm",
    "requests",
    "click",
    "rich",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "black>=22.0",
    "flake8>=4.0", 
    "mypy>=0.991",
    "pre-commit>=2.20",
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
]
docs = [
    "mkdocs>=1.4",
    "mkdocs-material>=8.0",
    "mkdocs-jupyter>=0.21",
]
full = [
    # Video processing
    "scikit-image",
    "librosa", 
    "soundfile",
    "pydub",
    "decord",
    "moviepy",
    "seaborn",
    "scikit-learn",
    "jupyterlab",
    "notebook",
    # Memory optimization
    "bitsandbytes",
    "optimum",
    # Monitoring
    "wandb", 
    "tensorboard",
    # Web frameworks
    "flask",
    "fastapi",
    "uvicorn", 
    "gradio",
    "streamlit",
    # Utils
    "gitpython",
    "python-dotenv",
    "pyyaml",
]
performance = [
    "xformers>=0.0.20",
    "triton>=2.0; platform_machine=='x86_64'", 
    "flash-attn>=2.0; platform_machine=='x86_64'",
]
cloud = [
    "boto3>=1.26",
    "google-cloud-storage>=2.7", 
    "azure-storage-blob>=12.14",
]

[project.urls]
"Homepage" = "https://github.com/jenochs/video-generation-book"
"Bug Reports" = "https://github.com/jenochs/video-generation-book/issues"
"Documentation" = "https://github.com/jenochs/video-generation-book/blob/main/README.md"
"Colab Notebooks" = "https://colab.research.google.com/github/jenochs/video-generation-book"
"Repository" = "https://github.com/jenochs/video-generation-book"

[project.scripts]
videogenbook = "videogenbook.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
videogenbook = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
]